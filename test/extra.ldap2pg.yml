# See postgres/extra.sh
#
# extra config tests corner cases or less used features:
#
# - run as superuser
# - LDAP sub-search
# - role config
# - local role inherit
# - sub-set of roles, marked by ldap_roles group.
# - multi-databases
# - no privileges

version: 6

postgres:
  roles_blacklist_query:
  # Postgres 16 cascades dropping ldap2pg roles to memberships granted by ldap2pg.
  # https://www.postgresql.org/message-id/flat/dbfd6ee6d4e1d5a9c7ae019a50968ae199436745.camel%40dalibo.com
  - ldap2pg
  - extra*
  - postgres
  - pg_*
  managed_roles_query: |
    SELECT 'public'
    UNION
    SELECT DISTINCT role.rolname
    FROM pg_roles AS role
    LEFT OUTER JOIN pg_auth_members AS ms ON ms.member = role.oid
    LEFT OUTER JOIN pg_roles AS ldap_roles
      ON ldap_roles.rolname = 'ldap_roles' AND ldap_roles.oid = ms.roleid
    WHERE role.rolname = 'ldap_roles'
        OR ldap_roles.oid IS NOT NULL
    ORDER BY 1;
  databases_query: [extra0, extra1]
  # Include pg_catalog.
  schemas_query: |
    SELECT nspname, rolname
      FROM pg_catalog.pg_namespace
      JOIN pg_catalog.pg_roles ON pg_catalog.pg_roles.oid = nspowner
     WHERE has_schema_privilege(CURRENT_USER, nspname, 'USAGE')
       AND nspname <> 'information_schema'
     ORDER BY 1;
  fallback_owner: extra

acls:
  # dumb custom privilege to read/grant/revoke privileges on pg_statistic
  # Incompatible with ALL TABLES IN SCHEMA ACL.
  pg_statistic:
    scope: database
    inspect: |
      SELECT grt.privilege_type,
            relnamespace::regnamespace::text AS schema,
            CASE grt.grantee
            WHEN 0 THEN 'public'
            ELSE grt.grantee::regrole::text
            END AS grantee,
            FALSE AS partial
        FROM pg_catalog.pg_class
            NATURAL JOIN aclexplode(COALESCE(relacl, acldefault('r', relowner))) AS grt
      WHERE relname = 'pg_statistic'
        AND privilege_type = ANY($1)
      ORDER BY 1, 2;
    grant: GRANT <privilege> ON TABLE <schema>.pg_statistic TO <grantee>;
    revoke: REVOKE <privilege> ON TABLE <schema>.pg_statistic FROM <grantee>;

privileges:
  stats:
    - type: SELECT
      on: pg_statistic
  # testing functions privileges. because master YAML uses routines.
  x: [__execute_on_functions__]

rules:
- description: "Static groups"
  roles:
  - name: ldap_roles
    comment: "Group of roles synchronized by ldap2pg."

- description: "Managing role configuration"
  roles:
  - name: charles
    config:
      client_min_messages: NOTICE
      application_name: created
    parents: ldap_roles

  - name: alter
    config:
      client_min_messages: NOTICE
      application_name: updated
    parents:
    - local_parent
    - ldap_roles

  - name: alizÃ©e
    config: {}
    options:
      LOGIN: true
      CONNECTION LIMIT: 10

  - name: nicolas
    parents:
    - ldap_roles


- description: "Superusers recursive"
  ldapsearch:
    base: "cn=users,dc=bridoulou,dc=fr"
    filter: >
      (&
        (objectClass=user)
        (memberOf:1.2.840.113556.1.4.1941:=cn=dba,cn=users,dc=bridoulou,dc=fr)
      )
  roles:
    - name: "{sAMAccountName}"
      # Force a sub-search
      comment: "group: {memberOf.sAMAccountName}"
      options: LOGIN SUPERUSER
      parents: [ldap_roles]

- description: "Hooks"
  ldapsearch:
    base: "cn=users,dc=bridoulou,dc=fr"
    filter: "(cn=corinne)"
  role:
    name: "{cn}"
    parent: ldap_roles
    before_create: "CREATE SCHEMA {cn.identifier()};"
    after_create: "CREATE TABLE {cn.identifier()}.username AS SELECT {cn.string()}::regrole AS username;"

- description: "Custom ACL."
  grant:
    - privilege: stats
      role: nicolas
      database: extra0
      schema: pg_catalog
    - privilege: corinne
      role: x
      database: extra0
      schema: public
